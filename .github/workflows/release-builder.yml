name: Release builder
run-name: Build ${{ github.ref_name }}

on:
  push:
    tags:
      - "v*.*.*"
  
permissions:
  contents: write

jobs:
  build-x86:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Build dependencies
      run: |
          export zlibArchive='https://github.com/madler/zlib/releases/download/v1.2.13/zlib-1.2.13.tar.xz'
          export caresArchive='https://github.com/c-ares/c-ares/releases/download/cares-1_19_0/c-ares-1.19.0.tar.gz'
          export wolfSSLArchive='https://github.com/wolfSSL/wolfssl/archive/refs/tags/v5.6.0-stable.tar.gz'
          export nghttp2Archive='https://github.com/nghttp2/nghttp2/releases/download/v1.52.0/nghttp2-1.52.0.tar.xz'
          export curlArchive='https://github.com/curl/curl/releases/download/curl-8_0_1/curl-8.0.1.tar.xz'

          echo -n "Install tools... "
          sudo apt update && sudo apt install tar xz-utils curl cmake make autoconf libtool -y

          echo -n "Get latest musl toolchain... "
          mkdir dependencies
          cd dependencies
          curl -s -L https://musl.cc/x86_64-linux-musl-native.tgz | tar zx

          echo -n "Set toolchain vars... "
          export TOOLCHAIN=$(pwd)/x86_64-linux-musl-native
          export AR=$TOOLCHAIN/bin/x86_64-linux-musl-gcc-ar
          export AS=$TOOLCHAIN/bin/as
          export CC=$TOOLCHAIN/bin/x86_64-linux-musl-gcc
          export CXX=$TOOLCHAIN/bin/x86_64-linux-musl-g++
          export LD=$TOOLCHAIN/bin/ld
          export RANLIB=$TOOLCHAIN/bin/x86_64-linux-musl-gcc-ranlib
          export STRIP=$TOOLCHAIN/bin/strip


          #zlib
          echo -n "Download and Extract zlib... "
          curl -s -L $zlibArchive | tar --xz -x

          echo -n "Configure zlib... "
          cd zlib*
          ./configure --prefix=$TOOLCHAIN --static

          echo -n "Build zlib... "
          make -j$(nproc)

          echo -n "Install zlib... "
          make install 
          cd ..


          #c-ares
          echo -n "Download and Extract c-ares... "
          curl -s -L $caresArchive | tar zx

          echo -n "Configure c-ares... "
          cd c-ares*
          ./configure --prefix=$TOOLCHAIN --host=x86_64-linux-musl --disable-shared 

          echo -n "Build c-ares... "
          make -j"$(nproc)" 

          echo -n "Install c-ares... "
          make install 
          cd ..


          #wolfSSL
          echo -n "Download and Extract wolfSSL... "
          curl -s -L $wolfSSLArchive | tar xz

          echo -n "Configure wolfSSL... "
          cd wolfssl*
          ./autogen.sh 
          ./configure --host=x86_64-linux-musl --enable-curl --prefix=$TOOLCHAIN --enable-static --disable-shared --enable-all-crypto --with-libz=$TOOLCHAIN 

          echo -n "Build wolfSSL... "
          make

          echo -n "Install wolfSSL... "
          make install 
          cd ..


          #nghttp2
          echo -n "Download and Extract nghttp2... "
          curl -s -L $nghttp2Archive | tar --xz -x

          echo -n "Configure nghttp2... "
          cd nghttp2*
          ./configure --host=x86_64-linux-musl --enable-lib-only --disable-shared --prefix=$TOOLCHAIN

          echo -n "Build nghttp2... "
          make -j"$(nproc)" 

          echo -n "Install nghttp2... "
          make install
          cd ..


          #cURL
          echo -n "Download and Extract curl... "
          curl -s -L $curlArchive | tar --xz -x

          echo -n "Configure curl... "
          cd curl*
          ./configure --host=x86_64-linux-musl --disable-shared --prefix=$TOOLCHAIN --with-wolfssl=$TOOLCHAIN --enable-ares=$TOOLCHAIN --with-nghttp2=$TOOLCHAIN 

          echo -n "Build cURL... "
          make -j"$(nproc)" 

          echo -n "Install cURL... "
          make install 

    - name: Build ovh-dynhost
      run: |
          echo -n "Create build directory... "
          mkdir build-x86
          cd build-x86

          echo -n "Configure ovh-dynhost... "
          cmake -DCMAKE_BUILD_TYPE=Release ..

          echo -n "Build ovh-dynhost... "
          make
      
    - name: Test ovh-dynhost
      run: |
          chmod +x build/ovh-dynhost
          build/ovh-dynhost -v

  publish:
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ github.ref_name }}
        generate_release_notes: true
        tag_name: ${{ github.ref }}
        files: build/ovh-dynhost
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
